# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    tags:
      - '[0-9]+.[0-9]+*' # Push events to matching v*, i.e. 1.0, 20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'     
        required: true



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    deploy:
      name: "Deploy to staging"
      runs-on: ubuntu-latest
#       if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      # needs: test
      steps:
        - uses: actions/checkout@master
          
        - run: echo '::set-env name=VERSION::${{ github.ref }}'
        
        - run: echo '::set-env name=VERSION::${{ github.event.inputs.version }}'
          if: ${{ github.event.inputs.version }}
        
        - name: Publish to Registry
          uses: elgohr/Publish-Docker-Github-Action@master
          with:
            name: forichok/tgwarden
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            tags: "latest"

        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          with:
            tag_name: ${{ env.VERSION }}
            release_name: Release ${{ env.VERSION }}
            # body: changelog
            draft: false
            prerelease: false

        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/staging.key
            chmod 600 ~/.ssh/staging.key
            cat >>~/.ssh/config <<END
            Host staging
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/staging.key
              StrictHostKeyChecking no
            END
          env:
            SSH_USER: ${{ secrets.DEPLOY_SERVER_USERNAME }}
            SSH_KEY: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
            SSH_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}

        - name: Stop the server
          run: ssh staging 'docker ps'

        - name: Check out the source
          run: pwd
          
        - name: multiple command
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.DEPLOY_SERVER_HOST }}
            username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
            key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
            port: ${{ secrets.DEPLOY_SERVER_PORT }}
            script: |
              docker ps
              docker pull forichok/tgwarden
              docker stop twarden
              docker rm twarden 
              docker run --restart always -e BOT_TOKEN=${{ secrets.BOT_TOKEN }} -e TO_TRANSLATE='ru' -d --name twarden forichok/tgwarden

#              scp -r ${{ secrets.DEPLOY_SERVER_USERNAME }}@${{ secrets.DEPLOY_SERVER_PORT }}:${{ secrets.REMOTE_TARGET }} .
#         - name: Deploy to Server
#           uses: easingthemes/ssh-deploy@v2.1.5
#           env:
#               SSH_PRIVATE_KEY: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
# #               ARGS: "-rltgoDzvO --delete"
#               SOURCE: $GITHUB_WORKSPACE
#               REMOTE_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
#               REMOTE_USER: ${{ secrets.DEPLOY_SERVER_USERNAME }}
#               TARGET: ${{ secrets.REMOTE_TARGET }}
        
#         - name: Check out the source
#           run: ssh staging 'cd ~/Projects/TelegramWarden && ${{ secrets.ENV }} >> ~/.env1'
        

#         - name: Check out the source
#           run: ssh staging 'cd ~/Projects/TelegramWarden && git fetch && git reset --hard origin/master'

#         - name: Start the server
#           if: ${{ always() }}
#           run: ssh staging 'sudo systemctl start my-application'
